import numpy as np
import cv2
import os
from utils import resize_image, get_hog_feature, get_hoc_feature, euclidean_distance

# Load ƒë·∫∑c tr∆∞ng v√† labels t·ª´ th∆∞ m·ª•c assignment/meta/
hog_features = np.load('assignment/meta/hog_features.npy')
hoc_features = np.load('assignment/meta/hoc_features.npy')
labels = np.load('assignment/meta/labels.npy')

# Ki·ªÉm tra k√≠ch th∆∞·ªõc c·ªßa hog v√† hoc features
print(f"hog_features.shape: {hog_features.shape}")
print(f"hoc_features.shape: {hoc_features.shape}")

# ƒê·ªçc ·∫£nh truy v·∫•n
query_image_path = 'test/test4.jpg'  # ƒê·∫∑t ·∫£nh truy v·∫•n t·∫°i th∆∞ m·ª•c g·ªëc
if not os.path.exists(query_image_path):
    raise FileNotFoundError("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ·∫£nh query.jpg!")

query_image = cv2.imread(query_image_path)
query_image_resized = resize_image(query_image, size=(96, 96))  # Resize ·∫£nh truy v·∫•n
query_hog = get_hog_feature(query_image_resized)  # Tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng HOG
query_hoc = get_hoc_feature(query_image_resized)

# ƒê·∫£m b·∫£o r·∫±ng k√≠ch th∆∞·ªõc c·ªßa query_hog kh·ªõp v·ªõi k√≠ch th∆∞·ªõc c·ªßa hog_features
if query_hog.shape[0] != hog_features.shape[1]:
    print(f"‚ö†Ô∏è K√≠ch th∆∞·ªõc kh√¥ng kh·ªõp: query_hog: {query_hog.shape[0]}, hog_features: {hog_features.shape[1]}")
    # C√≥ th·ªÉ c·∫ßn ph·∫£i th·ª±c hi·ªán m·ªôt s·ªë ƒëi·ªÅu ch·ªânh trong h√†m `get_hog_feature` ƒë·ªÉ ƒë·∫£m b·∫£o k√≠ch th∆∞·ªõc ƒë·ªìng nh·∫•t

# Sau khi ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc, ti·∫øn h√†nh t√≠nh kho·∫£ng c√°ch
distances = []
for hog, hoc in zip(hog_features, hoc_features):
    dist = euclidean_distance(query_hog, hog) + euclidean_distance(query_hoc, hoc)
    distances.append(dist)

# Ki·ªÉm tra k√≠ch th∆∞·ªõc c·ªßa c√°c ƒë·∫∑c tr∆∞ng truy v·∫•n
print(f"query_hog.shape: {query_hog.shape}")
print(f"query_hoc.shape: {query_hoc.shape}")

# T√≠nh kho·∫£ng c√°ch k·∫øt h·ª£p HOG + HOC
distances = []
for hog, hoc in zip(hog_features, hoc_features):
    # Ki·ªÉm tra k√≠ch th∆∞·ªõc tr∆∞·ªõc khi t√≠nh kho·∫£ng c√°ch
    if hog.shape != query_hog.shape or hoc.shape != query_hoc.shape:
        print(f"‚ö†Ô∏è K√≠ch th∆∞·ªõc kh√¥ng kh·ªõp: hog: {hog.shape}, query_hog: {query_hog.shape}, hoc: {hoc.shape}, query_hoc: {query_hoc.shape}")
        continue
    dist = euclidean_distance(query_hog, hog) + euclidean_distance(query_hoc, hoc)
    distances.append(dist)

# L·∫•y 3 ·∫£nh g·∫ßn nh·∫•t
top_indices = np.argsort(distances)[:3]

print("üîç Top 3 ·∫£nh gi·ªëng nh·∫•t v·ªõi ·∫£nh truy v·∫•n:")
for rank, idx in enumerate(top_indices, 1):
    print(f"{rank}. {labels[idx]} (distance = {distances[idx]:.2f})")
